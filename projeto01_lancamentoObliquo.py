# -*- coding: utf-8 -*-
"""Projeto_01_Lancamento_Obliquo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10enuCgJmwso3wwm87ilaAaXTf34Ulkqo

- Julia Noriko 
 - Murilo Holtz Foltran

# Projeto 01 - Lançamento Oblíquo

## Introdução 

Nesse projeto foram simulados lançamentos oblíquos utilizando o método de Euler, realizando cinco simulações com valores arbitrários, considerando gravidade, velocidade inicial, massa do objeto e ângulo de disparo como parâmetros.

## Método 
Para melhor modelagem do problema, foram necessárias leis matemáticas que descrevem esse tipo de movimento, utilizando o recurso de separação de eixos, obteve-se:
$$ Fr = Fx + Fy $$
$$ Fx = Fat $$
$$ Fy = Fp + Fat $$

Pela segunda lei de Newton:
$$ F = m.a $$
$$ Fat = -k.v $$
$$ max = -k.vx $$
$$ may = m.g - kvy $$

Com o método de Euler:
$$ Δvx = (-k.vx/m).Δt $$
$$ Δvy = (g-k.vy/m).Δt $$

Como estabelecido no enunciado do projeto, Δt foi adotado como 0.01, assim, foi possível calcular em cada instante a velocidade em ambos os eixos, a altura, energia cinética e energia potencial.

Realizar a simulação computacional para o lançamento oblíquo de um projétil considerando o atrito do ar

## Parâmetros
- Velocidade inicial ($v(0)$)
- Aceleração gravidade ($g$)
- Altura inicial do corpo ($s(0)) –> 2d (x,y)$
- Angulo de lançamento ($theta$)
- Massa do corpo ($m$)
- Parâmetro de atrito ($k$)


## Código
"""

import math
import numpy as np
import matplotlib.pyplot as plt

"""# Simulação 1

- velocidade: 50m/s
- altura: 0m
- gravidade: 10m/s^2
- atrito: 5
- massa: 5kg
- ângulo: 45º
"""

dT = 0.01
g = 10
vel = 50
k = 5
m = 5
s0 = (0.00, 0.00) #altura 2d, nesse caso, começa na origem do gráfico (x=0, y=0)
altX = s0[0]
altY = s0[1]
theta = 45*math.pi/180
velX = vel*math.cos(theta)
velY = vel*math.sin(theta)

listaltX = []
listaltY = []
listvelX = []
listvelY = []
listec = []
listep = []
listt = [0]

for t in np.arange(0.00, 10, dT):
  #i = math.floor(t*100)
  velX = velX+((-(k*velX/m)*dT))
  listvelX.append(velX)
  velY = velY+((-g-(k*velY)/m)*dT)
  listvelY.append(velY)
  altY = altY + (velY * dT)
  if (altY < 0):
    altY = 0 #objeto se fixa no chão ao alcanca-lo
    velY = -velY*0.9
  listaltY.append(altY)
  altX = altX + (velX * dT)
  listaltX.append(altX)
  ep = m*g*altY 
  listep.append(ep)
  ec = (m*velX**2)/2 + (m*velY**2)/2
  listec.append(ec)
  listt.append(t)

plt.plot(listaltX, listaltY, 'g')
plt.xlabel("Deslocamento")
plt.ylabel("Altura")
plt.show()
plt.plot(listvelX)
plt.plot(listvelY)
plt.legend(['Vx', 'Vy'])
plt.xlabel("Tempo")
plt.ylabel("Velocidade")
plt.show()
plt.ylabel("Energias")
plt.xlabel("Tempo")
plt.plot(listec)
plt.plot(listep)
plt.legend(['Ecinética', 'Epotencial'])
plt.show()

"""# Simulação 2

- velocidade: 75m/s
- altura: 0m
- gravidade: 10m/s^2
- atrito: 15
- massa: 60kg
- ângulo: 0º
"""

dT = 0.01
g = 10
vel = 75
k = 15
m = 60
s0 = (0.00, 0.00) #altura 2d
altX = s0[0]
altY = s0[1]
theta = 0*math.pi/180
velX = vel*math.cos(theta)
velY = vel*math.sin(theta)

listaltX = []
listaltY = []
listvelX = []
listvelY = []
listec = []
listep = []

for t in np.arange(0.00, 10, dT):
  velX = velX+((-k*velX/m)*dT)
  listvelX.append(velX)
  velY = velY+((-g-(k*velY)/m)*dT)
  listvelY.append(velY)
  altY = altY + (velY * dT)
  if (altY < 0):
    altY = 0 #objeto se fixa no chão ao alcanca-lo
    velY = -velY*0.9
  listaltY.append(altY)
  altX = altX + (velX * dT)
  listaltX.append(altX)
  ep = m*g*altY 
  listep.append(ep)
  ec = ((m*velX**2)/2) + (m*velY**2)/2
  listec.append(ec)

plt.plot(listaltX, listaltY, 'g')
plt.xlabel("Deslocamento")
plt.ylabel("Altura")
plt.show()
plt.plot(listvelX)
plt.plot(listvelY)
plt.legend(['Vx', 'Vy'])
plt.xlabel("Tempo")
plt.ylabel("Velocidade")
plt.show()
plt.ylabel("Energias")
plt.xlabel("Tempo")
plt.plot(listec)
plt.plot(listep)
plt.legend(['Ecinética', 'Epotencial'])
plt.show()

"""# Simulação 3

- velocidade: 15m/s
- altura: 50m
- gravidade: 10m/s^2
- atrito: 10
- massa: 50kg
- ângulo: 0º
"""

dT = 0.01
g = 10
vel = 55
k = 10
m = 50
s0 = (0.00, 50.00) #altura 2d
altX = s0[0]
altY = s0[1]
theta = 0*math.pi/180
velX = vel*math.cos(theta)
velY = vel*math.sin(theta)

listaltX = []
listaltY = []
listvelX = []
listvelY = []
listec = []
listep = []

for t in np.arange(0.00, 10, dT):
  #i = math.floor(t*100)
  velX = velX+((-(k*velX/m)*dT))
  listvelX.append(velX)
  velY = velY+((-g-(k*velY)/m)*dT)
  listvelY.append(velY)
  altY = altY + (velY * dT)
  if (altY < 0):
    altY = 0 #objeto se fixa no chão ao alcanca-lo
    velY = -velY*0.9
  listaltY.append(altY)
  altX = altX + (velX * dT)
  listaltX.append(altX)
  ep = m*g*altY 
  listep.append(ep)
  ec = ((m*velX**2)/2) + ((m*velY**2)/2) 
  listec.append(ec)

plt.plot(listaltX, listaltY, 'g')
plt.xlabel("Deslocamento")
plt.ylabel("Altura")
plt.show()
plt.plot(listvelX)
plt.plot(listvelY)
plt.legend(['Vx', 'Vy'])
plt.xlabel("Tempo")
plt.ylabel("Velocidade")
plt.show()
plt.ylabel("Energias")
plt.xlabel("Tempo")
plt.plot(listec)
plt.plot(listep)
plt.legend(['Ecinética', 'Epotencial'])
plt.show()

"""# Simulação 3

- velocidade: 30m/s
- altura: 0m
- gravidade: 10m/s^2
- atrito: 5
- massa: 5kg
- ângulo: 75º
"""

dT = 0.01
g = 10
vel = 30
k = 10
m = 5
s0 = (0.00, 0.00) #altura 2d
altX = s0[0]
altY = s0[1]
theta = 75*math.pi/180
velX = vel*math.cos(theta)
velY = vel*math.sin(theta)

listaltX = []
listaltY = []
listvelX = []
listvelY = []
listec = []
listep = []

for t in np.arange(0.00, 10, dT):
  #i = math.floor(t*100)
  velX = velX+((-(k*velX/m)*dT))
  listvelX.append(velX)
  velY = velY+((-g-(k*velY)/m)*dT)
  listvelY.append(velY)
  altY = altY + (velY * dT)
  if (altY < 0):
    altY = 0 #objeto se fixa no chão ao alcanca-lo
    velY = -velY*0.9
  listaltY.append(altY)
  altX = altX + (velX * dT)
  listaltX.append(altX)
  ep = m*g*altY 
  listep.append(ep)
  ec = ((m*velX**2)/2) + ((m*velY**2)/2) 
  listec.append(ec)

plt.plot(listaltX, listaltY, 'g')
plt.xlabel("Deslocamento")
plt.ylabel("Altura")
plt.show()
plt.plot(listvelX)
plt.plot(listvelY)
plt.legend(['Vx', 'Vy'])
plt.xlabel("Tempo")
plt.ylabel("Velocidade")
plt.show()
plt.ylabel("Energias")
plt.xlabel("Tempo")
plt.plot(listec)
plt.plot(listep)
plt.legend(['Ecinética', 'Epotencial'])
plt.show()

"""# Simulação 4

- velocidade: 100m/s
- altura: 0m
- gravidade: 10m/s^2
- atrito: 8
- massa: 25kg
- ângulo: 85º
"""

dT = 0.01
g = 10
vel = 100
k = 8
m = 25
s0 = (0.00, 0.00) #altura 2d
altX = s0[0]
altY = s0[1]
theta = 85*math.pi/180
velX = vel*math.cos(theta)
velY = vel*math.sin(theta)

listaltX = []
listaltY = []
listvelX = []
listvelY = []
listec = []
listep = []

for t in np.arange(0.00, 30, dT):
  #i = math.floor(t*100)
  velX = velX+((-(k*velX/m)*dT))
  listvelX.append(velX)
  velY = velY+((-g-(k*velY)/m)*dT)
  listvelY.append(velY)
  altY = altY + (velY * dT)
  if (altY < 0):
    altY = 0 #objeto se fixa no chão ao alcanca-lo
    velY = -velY*0.9
  listaltY.append(altY)
  altX = altX + (velX * dT)
  listaltX.append(altX)
  ep = m*g*altY 
  listep.append(ep)
  ec = ((m*velX**2)/2) + ((m*velY**2)/2) 
  listec.append(ec)

plt.plot(listaltX, listaltY, 'g')
plt.xlabel("Deslocamento")
plt.ylabel("Altura")
plt.show()
plt.plot(listvelX)
plt.plot(listvelY)
plt.legend(['Vx', 'Vy'])
plt.xlabel("Tempo")
plt.ylabel("Velocidade")
plt.show()
plt.ylabel("Energias")
plt.xlabel("Tempo")
plt.plot(listec)
plt.plot(listep)
plt.legend(['Ecinética', 'Epotencial'])
plt.show()

"""# Simulação 5

- velocidade: 3m/s
- altura: 35m
- gravidade: 10m/s^2
- atrito: 10
- massa: 70kg
- ângulo: 20º
"""

dT = 0.01
g = 10
vel = 3
k = 10
m = 70
s0 = (0.00, 35.00) #altura 2d
altX = s0[0]
altY = s0[1]
theta = 20*math.pi/180
velX = vel*math.cos(theta)
velY = vel*math.sin(theta)

listaltX = []
listaltY = []
listvelX = []
listvelY = []
listec = []
listep = []

for t in np.arange(0.00, 30, dT):
  #i = math.floor(t*100)
  velX = velX+((-(k*velX/m)*dT))
  listvelX.append(velX)
  velY = velY+((-g-(k*velY)/m)*dT)
  listvelY.append(velY)
  altY = altY + (velY * dT)
  if (altY < 0):
    altY = 0 #objeto se fixa no chão ao alcanca-lo
    velY = -velY*0.9
  listaltY.append(altY)
  altX = altX + (velX * dT)
  listaltX.append(altX)
  ep = m*g*altY 
  listep.append(ep)
  ec = ((m*velX**2)/2) + ((m*velY**2)/2) 
  listec.append(ec)

plt.plot(listaltX, listaltY, 'g')
plt.xlabel("Deslocamento")
plt.ylabel("Altura")
plt.show()
plt.plot(listvelX)
plt.plot(listvelY)
plt.legend(['Vx', 'Vy'])
plt.xlabel("Tempo")
plt.ylabel("Velocidade")
plt.show()
plt.ylabel("Energias")
plt.xlabel("Tempo")
plt.plot(listec)
plt.plot(listep)
plt.legend(['Ecinética', 'Epotencial'])
plt.show()

